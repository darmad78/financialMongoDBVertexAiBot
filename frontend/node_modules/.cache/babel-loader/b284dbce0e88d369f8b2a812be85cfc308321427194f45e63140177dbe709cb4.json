{"ast":null,"code":"var _jsxFileName = \"/Users/dario.maddaluno/Documents/Dev/MAAP_VertexDemo/Financial/frontend/src/App.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s2();\n  var _s = $RefreshSig$();\n  const [message, setMessage] = useState(\"\");\n  const [question, setQuestion] = useState(\"\");\n  const [answer, setAnswer] = useState(\"\");\n  const loadData = async () => {\n    try {\n      const response = await fetch(\"http://127.0.0.1:8000/load_client\", {\n        method: \"POST\"\n      });\n      const result = await response.json();\n      console.log(result); // Log the full response to check for any issues\n      setMessage(result.message); // Show success or failure message\n    } catch (error) {\n      console.error(\"Error:\", error); // Log any errors that occur\n      setMessage(\"Failed to update data. Please try again.\");\n    }\n  };\n\n  // Remove duplicate imports\n\n  function App() {\n    _s();\n    const [messages, setMessages] = useState([]); // Store conversation history\n    const [input, setInput] = useState(\"\"); // Store user input\n    const [message, setMessage] = useState(\"\"); // Status message for loading data\n\n    const loadData = async () => {\n      try {\n        const response = await fetch(\"http://127.0.0.1:8000/load_client\", {\n          method: \"POST\"\n        });\n        const result = await response.json();\n        console.log(result); // Log the full response to check for any issues\n        setMessage(result.message); // Show success or failure message\n        setMessages(prevMessages => [...prevMessages, {\n          sender: \"system\",\n          text: result.message\n        }]); // Add system message to chat\n      } catch (error) {\n        console.error(\"Error:\", error); // Log any errors that occur\n        setMessage(\"Failed to update data. Please try again.\");\n        setMessages(prevMessages => [...prevMessages, {\n          sender: \"system\",\n          text: \"Failed to update data. Please try again.\"\n        }]); // Add error message to chat\n      }\n    };\n    const askQuestion_old = async () => {\n      try {\n        const response = await fetch(\"http://127.0.0.1:8000/ask_question/\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            question\n          })\n        });\n        const result = await response.json();\n        if (result.answer) {\n          setAnswer(result.answer);\n        } else {\n          setAnswer(\"Sorry, I couldn't find an answer.\");\n        }\n      } catch (error) {\n        setAnswer(\"Failed to get the answer. Please try again.\");\n      }\n    };\n    const askQuestion = async () => {\n      if (!input.trim()) return; // Prevent sending empty input\n\n      const userMessage = {\n        sender: \"user\",\n        text: input\n      };\n      setMessages(prevMessages => [...prevMessages, userMessage]); // Add user's message to the chat\n\n      try {\n        const response = await fetch(\"http://127.0.0.1:8000/ask_question/\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            question: input\n          })\n        });\n        const result = await response.json();\n        const botMessage = {\n          sender: \"bot\",\n          text: result.answer || \"Sorry, I couldn't find an answer.\"\n        };\n        setMessages(prevMessages => [...prevMessages, botMessage]); // Add bot's response to the chat\n      } catch (error) {\n        const errorMessage = {\n          sender: \"bot\",\n          text: \"Failed to process your question. Please try again.\"\n        };\n        setMessages(prevMessages => [...prevMessages, errorMessage]);\n      }\n      setInput(\"\"); // Clear the input field\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadData,\n        className: \"load-data-btn\",\n        children: \"Load Data into MongoDB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-message\",\n        children: statusMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbox\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.sender === \"user\" ? \"user\" : \"bot\"}`,\n          children: msg.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          placeholder: \"Ask a question about the data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: askQuestion,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this);\n  }\n  _s(App, \"xKnPxdxod3gFy8/CyW8d44LEdWw=\");\n}\n_s2(App, \"+y9JUsexXWOiYvhuV+tQva8DjvA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s2","_s","$RefreshSig$","message","setMessage","question","setQuestion","answer","setAnswer","loadData","response","fetch","method","result","json","console","log","error","messages","setMessages","input","setInput","prevMessages","sender","text","askQuestion_old","headers","body","JSON","stringify","askQuestion","trim","userMessage","botMessage","errorMessage","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","statusMessage","map","msg","index","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["/Users/dario.maddaluno/Documents/Dev/MAAP_VertexDemo/Financial/frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport './App.css';\n\nfunction App() {\n    const [message, setMessage] = useState(\"\");\n    const [question, setQuestion] = useState(\"\");\n    const [answer, setAnswer] = useState(\"\");\n\n    const loadData = async () => {\n        try {\n            const response = await fetch(\"http://127.0.0.1:8000/load_client\", {\n                method: \"POST\",\n            });\n            const result = await response.json();\n            console.log(result);  // Log the full response to check for any issues\n            setMessage(result.message);  // Show success or failure message\n        } catch (error) {\n            console.error(\"Error:\", error);  // Log any errors that occur\n            setMessage(\"Failed to update data. Please try again.\");\n        }\n};\n\n// Remove duplicate imports\n\nfunction App() {\n    const [messages, setMessages] = useState([]); // Store conversation history\n    const [input, setInput] = useState(\"\"); // Store user input\n    const [message, setMessage] = useState(\"\"); // Status message for loading data\n\n    const loadData = async () => {\n        try {\n            const response = await fetch(\"http://127.0.0.1:8000/load_client\", {\n                method: \"POST\",\n            });\n            const result = await response.json();\n            console.log(result); // Log the full response to check for any issues\n            setMessage(result.message); // Show success or failure message\n            setMessages((prevMessages) => [\n                ...prevMessages,\n                { sender: \"system\", text: result.message },\n            ]); // Add system message to chat\n        } catch (error) {\n            console.error(\"Error:\", error); // Log any errors that occur\n            setMessage(\"Failed to update data. Please try again.\");\n            setMessages((prevMessages) => [\n                ...prevMessages,\n                { sender: \"system\", text: \"Failed to update data. Please try again.\" },\n            ]); // Add error message to chat\n        }\n    };\n    const askQuestion_old = async () => {\n        try {\n            const response = await fetch(\"http://127.0.0.1:8000/ask_question/\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ question }),\n            });\n            const result = await response.json();\n            if (result.answer) {\n                setAnswer(result.answer);\n            } else {\n                setAnswer(\"Sorry, I couldn't find an answer.\");\n            }\n        } catch (error) {\n            setAnswer(\"Failed to get the answer. Please try again.\");\n        }\n    };\n    const askQuestion = async () => {\n        if (!input.trim()) return; // Prevent sending empty input\n\n        const userMessage = { sender: \"user\", text: input };\n        setMessages((prevMessages) => [...prevMessages, userMessage]); // Add user's message to the chat\n\n        try {\n            const response = await fetch(\"http://127.0.0.1:8000/ask_question/\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ question: input }),\n            });\n            const result = await response.json();\n\n            const botMessage = {\n                sender: \"bot\",\n                text: result.answer || \"Sorry, I couldn't find an answer.\",\n            };\n            setMessages((prevMessages) => [...prevMessages, botMessage]); // Add bot's response to the chat\n        } catch (error) {\n            const errorMessage = {\n                sender: \"bot\",\n                text: \"Failed to process your question. Please try again.\",\n            };\n            setMessages((prevMessages) => [...prevMessages, errorMessage]);\n        }\n\n        setInput(\"\"); // Clear the input field\n    };\n\n    return (\n        <div className=\"App\">\n            {/* Load Data Button */}\n            <button onClick={loadData} className=\"load-data-btn\">\n                Load Data into MongoDB\n            </button>\n            <p className=\"status-message\">{statusMessage}</p>\n\n            {/* Chatbox for ask_question */}\n            <div className=\"chatbox\">\n                {messages.map((msg, index) => (\n                    <div\n                        key={index}\n                        className={`message ${\n                            msg.sender === \"user\" ? \"user\" : \"bot\"\n                        }`}\n                    >\n                        {msg.text}\n                    </div>\n                ))}\n            </div>\n\n            {/* Input Area */}\n            <div className=\"input-area\">\n                <input\n                    type=\"text\"\n                    value={input}\n                    onChange={(e) => setInput(e.target.value)}\n                    placeholder=\"Ask a question about the data\"\n                />\n                <button onClick={askQuestion}>Send</button>\n            </div>\n        </div>\n        );\n    }\n\n}\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}